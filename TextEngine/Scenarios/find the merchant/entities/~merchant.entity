#import base_character

//This is responsible for setting various variables as a part of this entity's setup
function initialize()
	set_value("destination",0);
end

//Allows you to make something happen after an entity takes damage
function on_damage_taken(source, amount)

end

function on_entity_approach(ent)

end

//Function that controls this entity's behavior when it isn't the perspective entity
function get_ai_command()
	cmd = "do nothing";
	
	cur = get_value("destination");
	p = {cur}
	if(scene().get_name()=="town") then
		p = {1,2,3,4,5}
	else if (scene().get_name()=="farm") then
		p = {1,2,4};
	else if (scene().get_name()=="castle") then
		p = {1,3};
	else if (scene().get_name()=="forest") then
		p = {1,2,4};
	else
		p = {1,5};
	end
	
	dest = p[rand(0,size(p)-1)];
	
	if(dest == 1) then
		cmd = "go to town";
	else if (dest == 2) then
		cmd = "go to farm";
	else if (dest == 3) then
		cmd = "go to castle";
	else if (dest == 4) then
		cmd = "go to forest";
	else
		cmd = "go to docks";
	end
	say(concat("Merchant Command: '", cmd,"'"));
	return cmd;
end

//This is called before this entity takes its turn
function before_turn()
	
	
	say("I'm here!");
end

function before_leave(dest)
	entity(~player).set_value("debug", get_value("destination"));
	say("I'm leaving!");
end

function wait(time)
	//println: time
	if(!is_int(time))
		return "You must enter a whole number"
	end
	if(get_value("rounds_spent_waiting") >= time)
		set_value("rounds_spent_waiting", 1)
		return FINISH
	else
		set_value("rounds_spent_waiting", get_value("rounds_spent_waiting") + 1)
		//println: "HAVE WAITED FOR " get_value("rounds_spent_waiting") " ROUNDS OUT OF " time
		return REPEAT
	end
end

/////////////////////

function command:wait $time minutes(ent, time)
	if(ent != get_true_name())
		return FAILURE
	end
	return wait(time*12)
end

function command:wait $time seconds(ent, time)
	if(ent != get_true_name())
		return FAILURE
	end
	return wait(int(time/5))
end

function command:wait $time hours(ent, time)
	if(ent != get_true_name())
		return FAILURE
	end
	return wait(time*720)
end

function command:wait $time(ent, time)
	if(ent != get_true_name())
		return FAILURE
	end
	return wait(time)
end

function command:wait(ent)
	if(ent != get_true_name())
		return FAILURE
	end
	return wait(1)
end
