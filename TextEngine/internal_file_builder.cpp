#include "engine/headers/procedure/internal_file_builder.h"
#include "engine/headers/engine.h"

//This file essentially hard-codes scenario data into the executable.

void internal_file_builder::build_internal_files()
{
#if INCLUDE_BAKED_SCENARIOS
	std::vector<std::string>* ptr = nullptr;
	file_reader::initialize_internal_file("gamedata/packages/area_scene", 16);
	ptr = file_reader::get_internal_file_lines("gamedata/packages/area_scene");
	ptr->push_back("function initialize()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("gamedata/packages/base_character", 150);
	ptr = file_reader::get_internal_file_lines("gamedata/packages/base_character");
	ptr->push_back("#import base_entity");
	ptr->push_back("");
	ptr->push_back("function base_character_try_initialize()");
	ptr->push_back("	if(get_value(\"has_initialized_as_base_entity\") == 0) then");
	ptr->push_back("		set_value(\"has_initialized_as_base_entity\", true)");
	ptr->push_back("		set_var(\"inventory\", {NULL}) //Inventories are strictly meant to hold the true names of inventory items - not aliases.");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function base_character_show_inventory()");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	i = 0");
	ptr->push_back("	inv = get_var(\"inventory\")");
	ptr->push_back("	items_carried = 0");
	ptr->push_back("	");
	ptr->push_back("	while(i < size(inv))");
	ptr->push_back("		item = inv[i]");
	ptr->push_back("		//println: \"ITEM=\"item");
	ptr->push_back("		if(item != NULL)");
	ptr->push_back("			display = entity(item).get_display_name(get_true_name())");
	ptr->push_back("			display = concat(uppercase( get_substr(0,1,display) ), get_substr(1,display))");
	ptr->push_back("			weight = entity(item).get_weight()");
	ptr->push_back("			if(weight == 0) then");
	ptr->push_back("				entity(get_name()).tell( display )");
	ptr->push_back("			else");
	ptr->push_back("				entity(get_name()).tell( display \" (\" entity(item).get_weight() \")\")");
	ptr->push_back("			end");
	ptr->push_back("			items_carried = items_carried + 1");
	ptr->push_back("		end");
	ptr->push_back("		i = i + 1");
	ptr->push_back("	end");
	ptr->push_back("	entity(get_name()).tell( get_inventory_weight() \" \" \"/\" \" \" get_carry_capacity() )");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function base_character_inventory_command(ent)");
	ptr->push_back("	if(ent == get_true_name())");
	ptr->push_back("		base_character_show_inventory()");
	ptr->push_back("		return SUCCESS");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	return NO_MATCH");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function give_item(item_true_name)");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	if(!has_item(item_true_name)) then");
	ptr->push_back("		new_total_weight = get_carried_weight() + entity(item_true_name).get_weight()");
	ptr->push_back("		if(new_total_weight <= get_carry_capacity()) then");
	ptr->push_back("			attach(item_true_name)");
	ptr->push_back("			entity(get_true_name()).tell( general_substitution ( \"You picked up \" entity(item_true_name).get_display_name( get_true_name() ) \".\" ) )");
	ptr->push_back("			inv = get_var(\"inventory\")");
	ptr->push_back("			i = 0");
	ptr->push_back("			found_slot = false");
	ptr->push_back("			while(i < size(inv) && (!found_slot)) do");
	ptr->push_back("				if(inv[i] == NULL) then");
	ptr->push_back("					found_slot = true");
	ptr->push_back("				end");
	ptr->push_back("				i = i + 1");
	ptr->push_back("			end");
	ptr->push_back("			inv[i] = item_true_name");
	ptr->push_back("			set_var(\"inventory\", inv)");
	ptr->push_back("		else");
	ptr->push_back("			entity(get_true_name()).tell( entity(item_true_name).get_display_name( get_true_name() ) \" seems too heavy.\" )");
	ptr->push_back("		end");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_inventory_weight()");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	inv = get_value(\"inventory\")");
	ptr->push_back("	i = 0");
	ptr->push_back("	weight = 0");
	ptr->push_back("	while(i < size(inv)) do");
	ptr->push_back("		if(inv[i] != NULL)");
	ptr->push_back("			weight = weight + entity(inv[i]).get_weight()");
	ptr->push_back("		end");
	ptr->push_back("		i = i + 1");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	return weight");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_carried_weight()");
	ptr->push_back("	return get_inventory_weight()");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_carry_capacity()");
	ptr->push_back("	return 80");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function drop_item(item_true_name)");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	i = 0");
	ptr->push_back("	inv = get_value(\"inventory\")");
	ptr->push_back("	while(i < size(inv)) do");
	ptr->push_back("		if(inv[i] == item_true_name) then");
	ptr->push_back("			inv[i] = NULL");
	ptr->push_back("			set_value(\"inventory\", inv)");
	ptr->push_back("			unattach(item_true_name)");
	ptr->push_back("			tell(\"You set down \" entity(item_true_name).get_display_name(get_true_name()) \".\")");
	ptr->push_back("			return");
	ptr->push_back("		end");
	ptr->push_back("		i = i + 1");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function has_item_alias(item_name)");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	i = 0");
	ptr->push_back("	inv = get_var(\"inventory\")");
	ptr->push_back("	while(i < size(inv))");
	ptr->push_back("		item = inv[i]");
	ptr->push_back("		if( knows_alias(item_name, item) ) then");
	ptr->push_back("			return true");
	ptr->push_back("		end");
	ptr->push_back("		i = i + 1");
	ptr->push_back("	end");
	ptr->push_back("	return false");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function has_item(item_name)");
	ptr->push_back("	base_character_try_initialize()");
	ptr->push_back("	i = 0");
	ptr->push_back("	inv = get_var(\"inventory\")");
	ptr->push_back("	while(i < size(inv))");
	ptr->push_back("		item = inv[i]");
	ptr->push_back("		if( item_name == item ) then");
	ptr->push_back("			return true");
	ptr->push_back("		end");
	ptr->push_back("		i = i + 1");
	ptr->push_back("	end");
	ptr->push_back("	return false");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:inventory(ent)");
	ptr->push_back("	return base_character_inventory_command(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:i(ent)");
	ptr->push_back("	return base_character_inventory_command(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:inv(ent)");
	ptr->push_back("	return base_character_inventory_command(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("gamedata/packages/base_entity", 42);
	ptr = file_reader::get_internal_file_lines("gamedata/packages/base_entity");
	ptr->push_back("function initialize()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function before_turn()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_recover(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_hp_change(old, new)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_max_hp_change(old, new)");
	ptr->push_back("");
	ptr->push_back("end");

	file_reader::initialize_internal_file("gamedata/packages/base_item", 65);
	ptr = file_reader::get_internal_file_lines("gamedata/packages/base_item");
	ptr->push_back("#import base_entity");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	base_item.initialize()");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function base_item.initialize()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_weight()");
	ptr->push_back("	return 0");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:pick up $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).give_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:grab $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).give_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:take $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).give_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("funif( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).drop_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:set $name down(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).drop_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:put $name down(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).drop_item(get_true_name())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:drop $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	entity(ent).drop_item(get_true_name())");
	ptr->push_back("end");

	file_reader::initialize_internal_file("gamedata/casual_output_substitution.dat", 4);
	ptr = file_reader::get_internal_file_lines("gamedata/casual_output_substitution.dat");
	ptr->push_back("attack,strike");
	ptr->push_back("equip,wear,put on");
	ptr->push_back("strong,powerful,mighty");
	ptr->push_back("weak,feeble");

	file_reader::initialize_internal_file("gamedata/formal_output_substitution.dat", 4);
	ptr = file_reader::get_internal_file_lines("gamedata/formal_output_substitution.dat");
	ptr->push_back("attack,strike");
	ptr->push_back("equip,wear,put on");
	ptr->push_back("strong,powerful,mighty");
	ptr->push_back("weak,feeble");

	file_reader::initialize_internal_file("gamedata/generic_output_substitution.dat", 4);
	ptr = file_reader::get_internal_file_lines("gamedata/generic_output_substitution.dat");
	ptr->push_back("attack,strike");
	ptr->push_back("equip,wear,put on");
	ptr->push_back("strong,powerful,mighty");
	ptr->push_back("weak,feeble");

	file_reader::initialize_internal_file("gamedata/input_substitution.dat", 114);
	ptr = file_reader::get_internal_file_lines("gamedata/input_substitution.dat");
	ptr->push_back("attack:fight");
	ptr->push_back("attack:battle");
	ptr->push_back("attack:engage in combat with");
	ptr->push_back("attack:engage in battle with");
	ptr->push_back("attack:engage in combat against");
	ptr->push_back("attack:engage in battle against");
	ptr->push_back("attack:battle against");
	ptr->push_back("attack:fight against");
	ptr->push_back("drop:put down");
	ptr->push_back("drop:set down");
	ptr->push_back("equip:wear");
	ptr->push_back("equip:put on");
	ptr->push_back("equip:don");
	ptr->push_back("hour:hours");
	ptr->push_back("hour:hrs");
	ptr->push_back("like:leik");
	ptr->push_back("like:liek");
	ptr->push_back("like:really like");
	ptr->push_back("minute:minutes");
	ptr->push_back("minute:mins");
	ptr->push_back("minute:min");
	ptr->push_back("through:thru");
	ptr->push_back("please:pretty please");
	ptr->push_back("please:pls");
	ptr->push_back("please:plz");
	ptr->push_back("please:kindly");
	ptr->push_back("please:lpz");
	ptr->push_back("please:pleas");
	ptr->push_back("please:politely");
	ptr->push_back("quit:wuit");
	ptr->push_back("second:seconds");
	ptr->push_back("second:secs");
	ptr->push_back("stop:halt");
	ptr->push_back("stop:cease");
	ptr->push_back("stop:terminate");
	ptr->push_back("strong:powerful");
	ptr->push_back("strong:mighty");
	ptr->push_back("on:upon");
	ptr->push_back("the:this");
	ptr->push_back("the:my");
	ptr->push_back("unequip:doff");
	ptr->push_back("want to:wanna");
	ptr->push_back("what:wut");
	ptr->push_back("what:wjat");
	ptr->push_back("what:wht");
	ptr->push_back("10:ten");
	ptr->push_back("10:tenth");
	ptr->push_back("9:nine");
	ptr->push_back("9:ninth");
	ptr->push_back("8:eight");
	ptr->push_back("8:eighth");
	ptr->push_back("7:seven");
	ptr->push_back("7:seventh");
	ptr->push_back("6:six");
	ptr->push_back("6:sixth");
	ptr->push_back("5:five");
	ptr->push_back("5:fifth");
	ptr->push_back("4:four");
	ptr->push_back("4:fourth");
	ptr->push_back("3:three");
	ptr->push_back("3:third");
	ptr->push_back("2:two");
	ptr->push_back("2:second");
	ptr->push_back("1:one");
	ptr->push_back("1:first");
	ptr->push_back("0:zero");
	ptr->push_back("0:0th");
	ptr->push_back("0:zeroth");
	ptr->push_back("0:zeroeth");
	ptr->push_back("1:1st");
	ptr->push_back("2:2nd");
	ptr->push_back("3:3rd");
	ptr->push_back("4:4th");
	ptr->push_back("5:5th");
	ptr->push_back("6:6th");
	ptr->push_back("7:7th");
	ptr->push_back("8:8th");
	ptr->push_back("9:9th");
	ptr->push_back("10:10th");
	ptr->push_back("go:walk");
	ptr->push_back("go:run");
	ptr->push_back("remove_raw),");
	ptr->push_back("remove_raw).");
	ptr->push_back("remove_raw)!");
	ptr->push_back("remove_raw)?");
	ptr->push_back("remove_raw)-");
	ptr->push_back("remove_raw)#");
	ptr->push_back("remove)back to");
	ptr->push_back("remove)return to");
	ptr->push_back("remove)return back");
	ptr->push_back("remove)try to");
	ptr->push_back("remove)really");
	ptr->push_back("remove)I\'d like to");
	ptr->push_back("remove)I\'d love to");
	ptr->push_back("remove)let me");
	ptr->push_back("remove)please");
	ptr->push_back("remove)thank you");
	ptr->push_back("remove)at once");
	ptr->push_back("remove)if you will");
	ptr->push_back("remove)now");
	ptr->push_back("remove)another");
	ptr->push_back("remove)I will");
	ptr->push_back("remove)I\'ll");
	ptr->push_back("remove)want");
	ptr->push_back("remove)a");
	ptr->push_back("remove)an");
	ptr->push_back("remove)wanna");
	ptr->push_back("remove)to");
	ptr->push_back("remove)for");
	ptr->push_back("remove)the");
	ptr->push_back("remove)i");
	ptr->push_back("remove)lemme");
	ptr->push_back("remove)let me");
	ptr->push_back("remove)please");

	file_reader::initialize_internal_file("gamedata/medieval_output_substitution.dat", 4);
	ptr = file_reader::get_internal_file_lines("gamedata/medieval_output_substitution.dat");
	ptr->push_back("attack,strike");
	ptr->push_back("equip,wear,put on");
	ptr->push_back("strong,powerful,mighty");
	ptr->push_back("weak,feeble");

	file_reader::initialize_internal_file("gamedata/technical_output_substitution.dat", 4);
	ptr = file_reader::get_internal_file_lines("gamedata/technical_output_substitution.dat");
	ptr->push_back("attack,strike");
	ptr->push_back("equip,wear,put on");
	ptr->push_back("strong,powerful,mighty");
	ptr->push_back("weak,feeble");

	engine::register_baked_scenario("find the merchant");
	file_reader::initialize_internal_file("Scenarios/find the merchant/input_substitution.dat", 1);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/input_substitution.dat");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/settings.dat", 3);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/settings.dat");
	ptr->push_back("save_any_time : true");
	ptr->push_back("clear_on_scene_change : false");
	ptr->push_back("allow_character: ~player : The Noble");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/B.scene", 28);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/B.scene");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself at the mouth of the cave\")");
	ptr->push_back("	say(\"It\'s bright and sunny.\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go south(char)");
	ptr->push_back("	entity(char).transfer(start)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:eat $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/castle.scene", 73);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/castle.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself at the castle\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_town(caller)");
	ptr->push_back("	entity(caller).transfer(town)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//					COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:sit on throne(caller)");
	ptr->push_back("	if(entity(caller).is_perspective_entity())");
	ptr->push_back("		save;");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to castle(caller)");
	ptr->push_back("	return \"Already here.\";");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to town(caller)");
	ptr->push_back("	go_to_town(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/docks.scene", 64);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/docks.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself at the docks\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function go_to_town(caller)");
	ptr->push_back("	entity(caller).transfer(town)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//					COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:go to town(caller)");
	ptr->push_back("	go_to_town(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/farm.scene", 75);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/farm.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself at the farm\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_forest(caller)");
	ptr->push_back("	entity(caller).transfer(forest)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_town(caller)");
	ptr->push_back("	entity(caller).transfer(town)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//					COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:go to forest(caller)");
	ptr->push_back("	go_to_forest(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to woods(caller)");
	ptr->push_back("	go_to_forest(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to town(caller)");
	ptr->push_back("	go_to_town(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/forest.scene", 72);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/forest.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"num_doors\", 0);");
	ptr->push_back("	set_value(\"doors\", {});");
	ptr->push_back("	set_value(\"number\", 0);");
	ptr->push_back("	set_value(\"origin\",0);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function gen_room(id)");
	ptr->push_back("	set_value(\"num_doors\", rand(2,6));");
	ptr->push_back("	door = 0;");
	ptr->push_back("	while (door < num_doors)");
	ptr->push_back("		doors[door] = entity(~master_controller).gen_room();");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(concat(\"You find yourself in a room with \",get_value(\"num_doors\"),\" doors\".)));");
	ptr->push_back("	say(concat(\"Writen on the wall above them is the number \'\",get_value(\"number\"),\"\'\"));");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_farm(caller)");
	ptr->push_back("	entity(caller).transfer(farm)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function go_to_town(caller)");
	ptr->push_back("	entity(caller).transfer(town)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function thru_door(caller, door)");
	ptr->push_back("	doors = get_value(\"doors\");");
	ptr->push_back("	if( or(door < 1, door > get_value(\"num_doors\")) ) then");
	ptr->push_back("		");
	ptr->push_back("		return FAILURE;");
	ptr->push_back("	end");
	ptr->push_back("	entity(caller).transfer(concat(\"room\",doors[door - 1]));");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function return(caller)");
	ptr->push_back("	entity(caller).transfer(get_value(\"origin\"));");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//					COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:go to door $door(caller, door)");
	ptr->push_back("	thru_door(caller,door);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go through door $door(caller, door)");
	ptr->push_back("	thru_door(door);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go through $num door(caller,door)");
	ptr->push_back("	thru_door(door);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go back(caller)");
	ptr->push_back("	entity(caller).transfer(get_value(\"origin\"));");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/start.scene", 161);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/start.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_save_any_time(false);");
	ptr->push_back("	player_start = random(1,5)");
	ptr->push_back("	merchant_start = random(1,5)");
	ptr->push_back("	merchant_finish = random(1,5)");
	ptr->push_back("	while(player_start == merchant_finish)");
	ptr->push_back("		merchant_finish = random(1,5)");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	//1 = town");
	ptr->push_back("	//2 = farm");
	ptr->push_back("	//3 = castle");
	ptr->push_back("	//4 = forest");
	ptr->push_back("	//5 = docks");
	ptr->push_back("	");
	ptr->push_back("	if (merchant_start == 1)");
	ptr->push_back("		if(merchant_finish == 1)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("		else if (merchant_finish == 2)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("		else if (merchant_finish == 3)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("		else if (merchant_finish == 4)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(forest)");
	ptr->push_back("		else");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(docks)");
	ptr->push_back("		end");
	ptr->push_back("	else if (merchant_start==2) then");
	ptr->push_back("		if(merchant_finish == 1)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("		else if (merchant_finish == 2)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("		else if (merchant_finish == 3)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("		else if (merchant_finish == 4)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("			entity(~merchant).transfer(forest)");
	ptr->push_back("		else");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(docks)");
	ptr->push_back("		end");
	ptr->push_back("	else if (merchant_start==3) then");
	ptr->push_back("		if(merchant_finish == 1)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("		else if (merchant_finish == 2)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("		else if (merchant_finish == 3)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("		else if (merchant_finish == 4)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(forest)");
	ptr->push_back("		else");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(docks)");
	ptr->push_back("		end");
	ptr->push_back("	else if (merchant_start == 4) then");
	ptr->push_back("		entity(~merchant).transfer(forest)");
	ptr->push_back("		if(merchant_finish == 1)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("		else if (merchant_finish == 2)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("		else if (merchant_finish == 3)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("		else if (merchant_finish == 4)");
	ptr->push_back("			//do nothing");
	ptr->push_back("		else");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(docks)");
	ptr->push_back("		end");
	ptr->push_back("	else");
	ptr->push_back("		entity(~merchant).transfer(docks)");
	ptr->push_back("		if(merchant_finish == 1)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("		else if (merchant_finish == 2)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(farm)");
	ptr->push_back("		else if (merchant_finish == 3)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(castle)");
	ptr->push_back("		else if (merchant_finish == 4)");
	ptr->push_back("			entity(~merchant).transfer(town)");
	ptr->push_back("			entity(~merchant).transfer(forest)");
	ptr->push_back("		end");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	player_start = 1");
	ptr->push_back("	if (player_start == 1)");
	ptr->push_back("		entity(~player).transfer(town)");
	ptr->push_back("	else if (player_start == 2)");
	ptr->push_back("		entity(~player).transfer(farm)");
	ptr->push_back("	else if (player_start == 3)");
	ptr->push_back("		entity(~player).transfer(castle)");
	ptr->push_back("	else if (player_start == 4)");
	ptr->push_back("		entity(~player).transfer(forest)");
	ptr->push_back("	else");
	ptr->push_back("		entity(~player).transfer(docks)");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself somewhere new...\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/scenes/town.scene", 104);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/scenes/town.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	");
	ptr->push_back("	say(\"You find yourself in town\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_castle(caller)");
	ptr->push_back("	entity(caller).transfer(castle)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_forest(caller)");
	ptr->push_back("	entity(caller).transfer(forest)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_farm(caller)");
	ptr->push_back("	entity(caller).transfer(farm)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_docks(caller)");
	ptr->push_back("	entity(caller).transfer(docks)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_to_town(caller)");
	ptr->push_back("	entity(caller).transfer(town)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//					COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:go to castle(caller)");
	ptr->push_back("	go_to_castle(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to forest(caller)");
	ptr->push_back("	go_to_forest(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to woods(caller)");
	ptr->push_back("	go_to_forest(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to farm(caller)");
	ptr->push_back("	go_to_farm(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to docks(caller)");
	ptr->push_back("	go_to_docks(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go to town(caller)");
	ptr->push_back("	go_to_town(caller)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/entities/~dummy.entity", 50);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/entities/~dummy.entity");
	ptr->push_back("#import base_item");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	add_title(\"grandfather clock\")");
	ptr->push_back("	add_title(\"clock\")");
	ptr->push_back("	add_title(\"timepiece\")");
	ptr->push_back("	add_title(\"time piece\")");
	ptr->push_back("	add_title(\"big clock\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function clock_time()");
	ptr->push_back("	total_seconds = get_value(\"time\") * 5");
	ptr->push_back("	seconds = (total_seconds % 60)");
	ptr->push_back("	total_minutes = int(total_seconds / 60)");
	ptr->push_back("	minutes = total_minutes % 60");
	ptr->push_back("	total_hours = int(total_minutes / 60)");
	ptr->push_back("	hours = total_hours % 12");
	ptr->push_back("	return hours \":\" minutes \":\" seconds");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(dest)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn()");
	ptr->push_back("	set_value(\"time\", get_value(\"time\") + 1)");
	ptr->push_back("	say(\"A few seconds pass, and the grandfather clock now reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	//describe()");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You see a grandfather clock, which currently reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:reset $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	set_value(\"time\", 0)");
	ptr->push_back("	entity(ent).tell(\"You turned the hand back to 0\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:clone $name(ent, name)");
	ptr->push_back("	clone(name)");
	ptr->push_back("	//println: name");
	ptr->push_back("	scene().transfer(name)");
	ptr->push_back("end");

	file_reader::initialize_internal_file("Scenarios/find the merchant/entities/~merchant.entity", 115);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/entities/~merchant.entity");
	ptr->push_back("#import base_character");
	ptr->push_back("");
	ptr->push_back("//This is responsible for setting various variables as a part of this entity\'s setup");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"destination\",0);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Allows you to make something happen after an entity takes damage");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Function that controls this entity\'s behavior when it isn\'t the perspective entity");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	cmd = \"do nothing\";");
	ptr->push_back("	");
	ptr->push_back("	cur = get_value(\"destination\");");
	ptr->push_back("	p = {cur}");
	ptr->push_back("	if(scene().get_name()==\"town\") then");
	ptr->push_back("		p = {1,2,3,4,5}");
	ptr->push_back("	else if (scene().get_name()==\"farm\") then");
	ptr->push_back("		p = {1,2,4};");
	ptr->push_back("	else if (scene().get_name()==\"castle\") then");
	ptr->push_back("		p = {1,3};");
	ptr->push_back("	else if (scene().get_name()==\"forest\") then");
	ptr->push_back("		p = {1,2,4};");
	ptr->push_back("	else");
	ptr->push_back("		p = {1,5};");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	dest = p[rand(0,size(p)-1)];");
	ptr->push_back("	");
	ptr->push_back("	if(dest == 1) then");
	ptr->push_back("		cmd = \"go to town\";");
	ptr->push_back("	else if (dest == 2) then");
	ptr->push_back("		cmd = \"go to farm\";");
	ptr->push_back("	else if (dest == 3) then");
	ptr->push_back("		cmd = \"go to castle\";");
	ptr->push_back("	else if (dest == 4) then");
	ptr->push_back("		cmd = \"go to forest\";");
	ptr->push_back("	else");
	ptr->push_back("		cmd = \"go to docks\";");
	ptr->push_back("	end");
	ptr->push_back("	say(concat(\"Merchant Command: \'\", cmd,\"\'\"));");
	ptr->push_back("	return cmd;");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//This is called before this entity takes its turn");
	ptr->push_back("function before_turn()");
	ptr->push_back("	");
	ptr->push_back("	");
	ptr->push_back("	say(\"I\'m here!\");");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(dest)");
	ptr->push_back("	entity(~player).set_value(\"debug\", get_value(\"destination\"));");
	ptr->push_back("	say(\"I\'m leaving!\");");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function wait(time)");
	ptr->push_back("	//println: time");
	ptr->push_back("	if(!is_int(time))");
	ptr->push_back("		return \"You must enter a whole number\"");
	ptr->push_back("	end");
	ptr->push_back("	if(get_value(\"rounds_spent_waiting\") >= time)");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", 1)");
	ptr->push_back("		return FINISH");
	ptr->push_back("	else");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", get_value(\"rounds_spent_waiting\") + 1)");
	ptr->push_back("		//println: \"HAVE WAITED FOR \" get_value(\"rounds_spent_waiting\") \" ROUNDS OUT OF \" time");
	ptr->push_back("		return REPEAT");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("/////////////////////");
	ptr->push_back("");
	ptr->push_back("function command:wait $time minutes(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*12)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time seconds(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(int(time/5))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time hours(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*720)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait(ent)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(1)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/entities/~NPC.entity", 85);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/entities/~NPC.entity");
	ptr->push_back("#import base_character");
	ptr->push_back("");
	ptr->push_back("//This is responsible for setting various variables as a part of this entity\'s setup");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"time_since_saw_merchant\",100);");
	ptr->push_back("	set_value(\"merchant_destination\",-1);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Allows you to make something happen after an entity takes damage");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Function that controls this entity\'s behavior when it isn\'t the perspective entity");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//This is called before this entity takes its turn");
	ptr->push_back("function before_turn()");
	ptr->push_back("	//Called before this entity\'s turn");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	if (ent == ~merchant) then");
	ptr->push_back("		set_value(\"time_since_saw_merchant\",0);");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(dest)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function wait(time)");
	ptr->push_back("	//println: time");
	ptr->push_back("	if(!is_int(time))");
	ptr->push_back("		return \"You must enter a whole number\"");
	ptr->push_back("	end");
	ptr->push_back("	if(get_value(\"rounds_spent_waiting\") >= time)");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", 1)");
	ptr->push_back("		return FINISH");
	ptr->push_back("	else");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", get_value(\"rounds_spent_waiting\") + 1)");
	ptr->push_back("		//println: \"HAVE WAITED FOR \" get_value(\"rounds_spent_waiting\") \" ROUNDS OUT OF \" time");
	ptr->push_back("		return REPEAT");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("/////////////////////");
	ptr->push_back("");
	ptr->push_back("function command:wait $time minutes(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*12)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time seconds(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(int(time/5))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time hours(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*720)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait(ent)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(1)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/entities/~player.entity", 91);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/entities/~player.entity");
	ptr->push_back("#import base_character");
	ptr->push_back("");
	ptr->push_back("//This is responsible for setting various variables as a part of this entity\'s setup");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"rounds_spent_waiting\",1)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Allows you to make something happen after an entity takes damage");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Function that controls this entity\'s behavior when it isn\'t the perspective entity");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//This is called before this entity takes its turn");
	ptr->push_back("function before_turn()");
	ptr->push_back("	command:debug(get_name());");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(dest)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	if(ent == ~merchant)");
	ptr->push_back("		clear;");
	ptr->push_back("		say(\"You\'re just the man I wanted to see!\");");
	ptr->push_back("		say(\"YOU WIN!\");");
	ptr->push_back("		finish;");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function wait(time)");
	ptr->push_back("	//println: time");
	ptr->push_back("	if(!is_int(time))");
	ptr->push_back("		return \"You must enter a whole number\"");
	ptr->push_back("	end");
	ptr->push_back("	if(get_value(\"rounds_spent_waiting\") >= time)");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", 1)");
	ptr->push_back("		return FINISH");
	ptr->push_back("	else");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", get_value(\"rounds_spent_waiting\") + 1)");
	ptr->push_back("		//println: \"HAVE WAITED FOR \" get_value(\"rounds_spent_waiting\") \" ROUNDS OUT OF \" time");
	ptr->push_back("		return REPEAT");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("/////////////////////   COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:debug(ent)");
	ptr->push_back("	say(\"Merchant Location: \" entity(~merchant).get_scene_name());");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time minutes(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*12)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time seconds(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(int(time/5))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time hours(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*720)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait(ent)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(1)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/find the merchant/entities/~timer.entity", 50);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/entities/~timer.entity");
	ptr->push_back("#import base_item");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	add_title(\"grandfather clock\")");
	ptr->push_back("	add_title(\"clock\")");
	ptr->push_back("	add_title(\"timepiece\")");
	ptr->push_back("	add_title(\"time piece\")");
	ptr->push_back("	add_title(\"big clock\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function clock_time()");
	ptr->push_back("	total_seconds = get_value(\"time\") * 5");
	ptr->push_back("	seconds = (total_seconds % 60)");
	ptr->push_back("	total_minutes = int(total_seconds / 60)");
	ptr->push_back("	minutes = total_minutes % 60");
	ptr->push_back("	total_hours = int(total_minutes / 60)");
	ptr->push_back("	hours = total_hours % 12");
	ptr->push_back("	return hours \":\" minutes \":\" seconds");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(dest)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn()");
	ptr->push_back("	set_value(\"time\", get_value(\"time\") + 1)");
	ptr->push_back("	say(\"A few seconds pass, and the grandfather clock now reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	//describe()");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You see a grandfather clock, which currently reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:reset $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	set_value(\"time\", 0)");
	ptr->push_back("	entity(ent).tell(\"You turned the hand back to 0\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:clone $name(ent, name)");
	ptr->push_back("	clone(name)");
	ptr->push_back("	//println: name");
	ptr->push_back("	scene().transfer(name)");
	ptr->push_back("end");

	file_reader::initialize_internal_file("Scenarios/find the merchant/templates/test_package.template", 3);
	ptr = file_reader::get_internal_file_lines("Scenarios/find the merchant/templates/test_package.template");
	ptr->push_back("function package.test()");
	ptr->push_back("	tell(\"TEST\")");
	ptr->push_back("end");

	engine::register_baked_scenario("maze");
	file_reader::initialize_internal_file("Scenarios/maze/settings.dat", 3);
	ptr = file_reader::get_internal_file_lines("Scenarios/maze/settings.dat");
	ptr->push_back("save_any_time : true");
	ptr->push_back("clear_on_scene_change : false");
	ptr->push_back("allow_character: ~player : The Escape Artist");

	file_reader::initialize_internal_file("Scenarios/maze/scenes/room.scene", 123);
	ptr = file_reader::get_internal_file_lines("Scenarios/maze/scenes/room.scene");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function gen_data()");
	ptr->push_back("	num_doors = rand(2,6);");
	ptr->push_back("	doors = {};");
	ptr->push_back("	i = 0;");
	ptr->push_back("	while(i < num_doors) do");
	ptr->push_back("		doors[i] = 0;");
	ptr->push_back("		i = i + 1;");
	ptr->push_back("	end");
	ptr->push_back("	set_value(\"origin\",0);");
	ptr->push_back("	set_value(\"doors\",doors);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function gen_room(origin)");
	ptr->push_back("	room_number = get_global_value(\"rooms_generated\") + 1;");
	ptr->push_back("	set_global_value(\"rooms_generated\", room_number);");
	ptr->push_back("	id = concat(\"room_\", room_number);");
	ptr->push_back("	scene(room).clone(id);");
	ptr->push_back("	scene(id).gen_data();");
	ptr->push_back("	scene(id).set_value(\"id\", id);");
	ptr->push_back("	scene(id).set_value(\"origin\",origin);");
	ptr->push_back("	return id;");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(concat(\"You find yourself in a room with \",size(get_value(\"doors\")),\" doors.\"));");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function get_door_from_index(num)");
	ptr->push_back("	ds = get_value(\"doors\");");
	ptr->push_back("	if(ds[num] == 0)");
	ptr->push_back("		ds[num] = scene(room).gen_room(get_value(\"id\"));");
	ptr->push_back("		set_value(\"doors\", ds);");
	ptr->push_back("		return ds[num];");
	ptr->push_back("	else");
	ptr->push_back("		return ds[num];");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function thru_door(caller, num)");
	ptr->push_back("	if(not(is_integer(num))) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	index = num - 1;");
	ptr->push_back("	doors = get_value(\"doors\");");
	ptr->push_back("	if(or(index < 0, index >=size(doors))) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	");
	ptr->push_back("	id = get_door_from_index(index);");
	ptr->push_back("	entity(caller).transfer(id);");
	ptr->push_back("	return SUCCESS;");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function go_back(caller)");
	ptr->push_back("	entity(caller).tell(\"You head back the way you came.\");");
	ptr->push_back("	entity(caller).transfer(get_value(\"origin\"));");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//COMMANDS");
	ptr->push_back("");
	ptr->push_back("function command:go $num door(caller, num)");
	ptr->push_back("	return thru_door(caller, num);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go through door $num(caller,num)");
	ptr->push_back("	return thru_door(caller,num);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:go through $num door(caller,num)");
	ptr->push_back("	return thru_door(caller, num);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:door $num(caller, num)");
	ptr->push_back("	return thru_door(caller, num);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:$num door(caller, num)");
	ptr->push_back("	return thru_door(caller, num);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("function command:go back(caller)");
	ptr->push_back("	if(get_value(\"origin\")==0) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	go_back(caller);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:return(caller)");
	ptr->push_back("	if(get_value(\"origin\")==0) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	go_back(caller);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:leave(caller)");
	ptr->push_back("	if(get_value(\"origin\")==0) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	go_back(caller);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:back(caller)");
	ptr->push_back("	if(get_value(\"origin\")==0) then");
	ptr->push_back("		return NO_MATCH;");
	ptr->push_back("	end");
	ptr->push_back("	go_back(caller);");
	ptr->push_back("end");

	file_reader::initialize_internal_file("Scenarios/maze/scenes/start.scene", 59);
	ptr = file_reader::get_internal_file_lines("Scenarios/maze/scenes/start.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_global_value(\"rooms_generated\",\"0\");");
	ptr->push_back("	scene(room).gen_room(0);");
	ptr->push_back("	entity(~player).transfer(room_1);");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself inside a cave\")");
	ptr->push_back("	say(\"It\'s cold and dark.\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(c)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/maze/entities/~player.entity", 78);
	ptr = file_reader::get_internal_file_lines("Scenarios/maze/entities/~player.entity");
	ptr->push_back("#import base_character");
	ptr->push_back("");
	ptr->push_back("//This is responsible for setting various variables as a part of this entity\'s setup");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"rounds_spent_waiting\",1)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Allows you to make something happen after an entity takes damage");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Function that controls this entity\'s behavior when it isn\'t the perspective entity");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//This is called before this entity takes its turn");
	ptr->push_back("function before_turn()");
	ptr->push_back("	//Called before this entity\'s turn");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function wait(time)");
	ptr->push_back("	//println: time");
	ptr->push_back("	if(!is_int(time))");
	ptr->push_back("		return \"You must enter a whole number\"");
	ptr->push_back("	end");
	ptr->push_back("	if(get_value(\"rounds_spent_waiting\") >= time)");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", 1)");
	ptr->push_back("		return FINISH");
	ptr->push_back("	else");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", get_value(\"rounds_spent_waiting\") + 1)");
	ptr->push_back("		//println: \"HAVE WAITED FOR \" get_value(\"rounds_spent_waiting\") \" ROUNDS OUT OF \" time");
	ptr->push_back("		return REPEAT");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_leave(room)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("/////////////////////");
	ptr->push_back("");
	ptr->push_back("function command:wait $time minutes(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*12)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time seconds(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(int(time/5))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time hours(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*720)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait(ent)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(1)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/maze/templates/test_package.template", 3);
	ptr = file_reader::get_internal_file_lines("Scenarios/maze/templates/test_package.template");
	ptr->push_back("function package.test()");
	ptr->push_back("	tell(\"TEST\")");
	ptr->push_back("end");

	engine::register_baked_scenario("test scenario");
	file_reader::initialize_internal_file("Scenarios/test scenario/settings.dat", 2);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/settings.dat");
	ptr->push_back("allow_custom_character : no");
	ptr->push_back("allow_character: ~main : Default Main Character");

	file_reader::initialize_internal_file("Scenarios/test scenario/scenes/B.scene", 28);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/scenes/B.scene");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself at the mouth of the cave\")");
	ptr->push_back("	say(\"It\'s bright and sunny.\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go south(char)");
	ptr->push_back("	entity(char).transfer(start)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:eat $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/test scenario/scenes/start.scene", 53);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/scenes/start.scene");
	ptr->push_back("Notes can be freely written outside of functions and the first line & other settings commands without interfering with anything.");
	ptr->push_back("However, within blocks of code, comments must be denoted by writing // at the beginning of the line.");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	transfer(~timer)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You find yourself inside a cave\")");
	ptr->push_back("	say(\"It\'s cold and dark.\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_enter_scene(char)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn(c)");
	ptr->push_back("	");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Functions with this name scheme are how custom commands are registered for scenes.");
	ptr->push_back("function command:go north(char)");
	ptr->push_back("	entity(char).transfer(B)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:I\'d like to eat an $stuff(char, thing_eaten)");
	ptr->push_back("	entity(char).tell(\"Ate \" thing_eaten)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function rng(ent)");
	ptr->push_back("	entity(ent).tell(\"You rolled a \" random(1,6))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll die(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll dice(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:roll 1d6(ent)");
	ptr->push_back("	rng(ent)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/test scenario/entities/~main.entity", 74);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/entities/~main.entity");
	ptr->push_back("#import base_character");
	ptr->push_back("");
	ptr->push_back("//This is responsible for setting various variables as a part of this entity\'s setup");
	ptr->push_back("function initialize()");
	ptr->push_back("	set_value(\"rounds_spent_waiting\",1)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Allows you to make something happen after an entity takes damage");
	ptr->push_back("function on_damage_taken(source, amount)");
	ptr->push_back("");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//Function that controls this entity\'s behavior when it isn\'t the perspective entity");
	ptr->push_back("function get_ai_command()");
	ptr->push_back("	return \"do nothing\"");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("//This is called before this entity takes its turn");
	ptr->push_back("function before_turn()");
	ptr->push_back("	//Called before this entity\'s turn");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function wait(time)");
	ptr->push_back("	//println: time");
	ptr->push_back("	if(!is_int(time))");
	ptr->push_back("		return \"You must enter a whole number\"");
	ptr->push_back("	end");
	ptr->push_back("	if(get_value(\"rounds_spent_waiting\") >= time)");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", 1)");
	ptr->push_back("		return FINISH");
	ptr->push_back("	else");
	ptr->push_back("		set_value(\"rounds_spent_waiting\", get_value(\"rounds_spent_waiting\") + 1)");
	ptr->push_back("		//println: \"HAVE WAITED FOR \" get_value(\"rounds_spent_waiting\") \" ROUNDS OUT OF \" time");
	ptr->push_back("		return REPEAT");
	ptr->push_back("	end");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("/////////////////////");
	ptr->push_back("");
	ptr->push_back("function command:wait $time minutes(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*12)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time seconds(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(int(time/5))");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time hours(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time*720)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait $time(ent, time)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(time)");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:wait(ent)");
	ptr->push_back("	if(ent != get_true_name())");
	ptr->push_back("		return FAILURE");
	ptr->push_back("	end");
	ptr->push_back("	return wait(1)");
	ptr->push_back("end");
	ptr->push_back("");

	file_reader::initialize_internal_file("Scenarios/test scenario/entities/~timer.entity", 46);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/entities/~timer.entity");
	ptr->push_back("#import base_item");
	ptr->push_back("");
	ptr->push_back("function initialize()");
	ptr->push_back("	add_title(\"grandfather clock\")");
	ptr->push_back("	add_title(\"clock\")");
	ptr->push_back("	add_title(\"timepiece\")");
	ptr->push_back("	add_title(\"time piece\")");
	ptr->push_back("	add_title(\"big clock\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function clock_time()");
	ptr->push_back("	total_seconds = get_value(\"time\") * 5");
	ptr->push_back("	seconds = (total_seconds % 60)");
	ptr->push_back("	total_minutes = int(total_seconds / 60)");
	ptr->push_back("	minutes = total_minutes % 60");
	ptr->push_back("	total_hours = int(total_minutes / 60)");
	ptr->push_back("	hours = total_hours % 12");
	ptr->push_back("	return hours \":\" minutes \":\" seconds");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function before_turn()");
	ptr->push_back("	set_value(\"time\", get_value(\"time\") + 1)");
	ptr->push_back("	say(\"A few seconds pass, and the grandfather clock now reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function on_entity_approach(ent)");
	ptr->push_back("	//describe()");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function describe()");
	ptr->push_back("	say(\"You see a grandfather clock, which currently reads \" clock_time())");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:reset $name(ent, addr)");
	ptr->push_back("	if( ! entity(ent).knows_alias( addr, get_true_name() ) )");
	ptr->push_back("		return NO MATCH");
	ptr->push_back("	end");
	ptr->push_back("	set_value(\"time\", 0)");
	ptr->push_back("	entity(ent).tell(\"You turned the hand back to 0\")");
	ptr->push_back("end");
	ptr->push_back("");
	ptr->push_back("function command:clone $name(ent, name)");
	ptr->push_back("	clone(name)");
	ptr->push_back("	//println: name");
	ptr->push_back("	scene().transfer(name)");
	ptr->push_back("end");

	file_reader::initialize_internal_file("Scenarios/test scenario/templates/test_package.template", 3);
	ptr = file_reader::get_internal_file_lines("Scenarios/test scenario/templates/test_package.template");
	ptr->push_back("function package.test()");
	ptr->push_back("	tell(\"TEST\")");
	ptr->push_back("end");

#endif
}
